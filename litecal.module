<?php
// $Id$

define('LITECAL_EMPTY', 0);
define('LITECAL_ITEM', 1);

/**
 * Implementation of hook_form_alter() for views_ui_preview_form.
 */
function litecal_form_views_ui_preview_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'litecal') .'/litecal.css');
}

/**
 * Implementation of hook_theme().
 */
function litecal_theme($existing, $type, $theme, $path) {
  $registry = array();
  $registry['litecal_timeitem']['variables'] = array('item' => NULL, 'granularity' => NULL, 'orientation' => 'horizontal');
  $registry['litecal_timeslots']['variables'] = array('timespan' => NULL, 'quickadd' => array(), 'slot_items' => array());
  $registry['litecal_timeslot_days']['variables'] = array('timespan' => NULL, 'start' => NULL, 'date' => NULL, 'format' => NULL, 'quickadd' => array(), 'slot_items' => array());
  $registry['litecal_timeslot_hours']['variables'] = array('timespan' => NULL, 'start' => NULL, 'date' => NULL, 'format' => NULL, 'quickadd' => array());
  $registry['litecal_header']['variables'] = array('label' => NULL, 'start' => NULL, 'granularity' => NULL, 'orientation' => 'horizontal');
  $registry['litecal_column_header']['variables'] = array('label' => NULL, 'attributes' => array());

  $registry['litecal_timeitem']['file'] =
  $registry['litecal_timeslots']['file'] =
  $registry['litecal_timeslot_days']['file'] =
  $registry['litecal_timeslot_hours']['file'] =
  $registry['litecal_header']['file'] =
  $registry['litecal_column_header']['file'] = 'litecal.theme.inc';

  return $registry;
}

/**
 * Implementation of hook_views_api().
 */
function litecal_views_api() {
  return array('api' => 3);
}

/**
 * Implementation of hook_views_plugins().
 */
function litecal_views_plugins() {
  $views_path = drupal_get_path('module', 'views');
  return array(
    'module' => 'views', // This just tells our themes are elsewhere.
    'style' => array(
      'litecal' => array(
        'title' => t('Litecal'),
        'help' => t('Litecal.'),
        'handler' => 'litecal_plugin_style_litecal',
        'theme' => 'litecal_view',
        'theme path' => drupal_get_path('module', 'litecal'),
        'theme file' => 'litecal.theme.inc',
        'path' => drupal_get_path('module', 'litecal'),
        'uses row plugin' => TRUE,
        'uses fields' => TRUE,
        'uses options' => TRUE,
        'type' => 'normal',
        'even empty' => TRUE,
      ),
    ),
  );
}

/**
 * Preprocessor for theme_litecal_view().
 */
function template_preprocess_litecal_view(&$vars) {
  drupal_add_library('dialog', 'dialog');
  $vars['class'] = implode($vars['classes_array'], ' ');
  $vars['view']->style_plugin->preprocess($vars);
}

/**
 *
 */
function litecal_menu() {
  $items = array();
  $litecal_views = array();

  $views = views_get_all_views();
  foreach ($views as $id => $view) {
    $current = array();
    foreach ($view->display as $display) {
      if ($display->display_plugin === 'page') {
        $current['display_id'] = $display->id;
        $current['path'] = $display->display_options['path'];
      }
      if (isset($display->display_options['style_plugin']) && $display->display_options['style_plugin'] === 'litecal') {
        $current['is_litecal'] = TRUE;
        if ($display->display_plugin !== 'default') {
          $current['display_id'] = $display->id;
        }
      }
    }
    
    if (isset($current['is_litecal']) && $current['is_litecal'] && $current['path']) {
      $litecal_views[$id] = $current;
    }
  }

  foreach ($litecal_views as $view_id => $details) {
    $path = "{$details['path']}/%/%dialog_js";
    $items[$path] = array(
      'title' => 'Litecal AJAX callback',
      'type' => MENU_CALLBACK,
      'page callback' => 'litecal_day_overlay_ajax_callback',
      'page arguments' => array(2, $views[$view_id], $details),
      'access arguments' => array('access content'),
    );
  }

  return $items;
}

function litecal_day_overlay_ajax_callback($ajax = FALSE, $view = '', $details = array()) {
  if (!$view->access($details['display_id'])) {
    //drupal_goto('404');
    return;
  }

  // Construct the dialog's content.
  $content = $view->preview($details['display_id'], array(arg(1)));

  if ($ajax) {
    // Options that are passed to the jQuery UI dialog. See the jQuery UI
    // website for more available options: http://jqueryui.com/demos/dialog/
    $options = array(
      'position' => 'center',
      'title' => $view->get_title(),
      'modal' => 'true',
      'width' => 766,
    );

    $commands = array();
    $commands[] = dialog_command_display($content, $options);
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }
  else {
    // If the user isn't using JavaScript, just show the normal page.
    return $content;
  }
}

/**
 * Convoluted method of handling column headers for inline fields.
 * Concatenates the labels of inline fields, seperated with the seperator.
 */
function litecal_get_labels($fields, $row_options = array()) {
  $i = 0;
  $keys = array_keys($fields);
  $labels = array();
  $inline = FALSE;
  $inline_fields = (isset($row_options['inline'])) ? $row_options['inline'] : array();

  foreach ($fields as $field) {
    if ($field->options['exclude']) {
      continue;
    }

    $next = (isset($keys[++$i])) ? $fields[$keys[$i]] : FALSE;

    // Condition for detecting the beginning of an inline sequence.
    if (!$inline && $next && isset($inline_fields[$field->field]) && isset($inline_fields[$next->field])) {
      $key = "";
      $label = "";
      $inline = TRUE;
    }

    $tmp = (!empty($field->options['label'])) ? $field->options['label'] : "";
    // If inline, concatenate.
    if ($inline) {
      $key .= $field->field;
      $label .= $tmp;
    }
    // Otherwise set the label.
    else {
      $key = $field->field;
      $label = $tmp;
    }

    // Condition for detecting the end of an inline sequence.
    if (!$next || ($next && isset($inline_fields[$field->field]) && !isset($inline_fields[$next->field]))) {
      $inline = FALSE;
    }

    // Finally, once inline is over or if there is no inline, set the label in 
    // the return array.
    if (!$inline) {
      $labels[$key] = $label;
    }
    // Might as well include the seperator.
    elseif ($next->options['label'] !== "") {
      $label .= $row_options['separator'];
    }

    if ($inline) {
      $key .= "_";
    }
  }

  return $labels;
}
