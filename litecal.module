<?php
// $Id$

define('LITECAL_EMPTY', 0);
define('LITECAL_ITEM', 1);

/**
 * Implementation of hook_form_alter() for views_ui_preview_form.
 */
function litecal_form_views_ui_preview_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'litecal') .'/litecal.css');
}

/**
 * Implementation of hook_theme().
 */
function litecal_theme($existing, $type, $theme, $path) {
  $registry = array();
  $registry['litecal_timeitem']['variable'] = array('item' => NULL, 'granularity' => NULL, 'orientation' => 'horizontal');
  $registry['litecal_timeslots']['variable'] = array('timespan' => NULL, 'quickadd' => array(), 'slot_items' => array());
  $registry['litecal_timeslot_days']['variable'] = array('timespan' => NULL, 'start' => NULL, 'date' => NULL, 'format' => NULL, 'quickadd' => array());
  $registry['litecal_timeslot_hours']['variable'] = array('timespan' => NULL, 'start' => NULL, 'date' => NULL, 'format' => NULL, 'quickadd' => array());
  $registry['litecal_header']['variable'] = array('label' => NULL, 'start' => 'NULL', 'granularity' => NULL, 'orientation' => 'horizontal');

  $registry['litecal_timeitem']['file'] =
  $registry['litecal_timeslots']['file'] =
  $registry['litecal_timeslot_days']['file'] =
  $registry['litecal_timeslot_hours']['file'] =
  $registry['litecal_header']['file'] = 'litecal.theme.inc';

  return $registry;
}

/**
 * Implementation of hook_views_api().
 */
function litecal_views_api() {
  return array('api' => 3);
}

/**
 * Implementation of hook_views_plugins().
 */
function litecal_views_plugins() {
  $views_path = drupal_get_path('module', 'views');
  return array(
    'module' => 'views', // This just tells our themes are elsewhere.
    'style' => array(
      'litecal' => array(
        'title' => t('Litecal'),
        'help' => t('Litecal.'),
        'handler' => 'litecal_plugin_style_litecal',
        'theme' => 'litecal_view',
        'theme path' => drupal_get_path('module', 'litecal'),
        'theme file' => 'litecal.theme.inc',
        'path' => drupal_get_path('module', 'litecal'),
        'uses row plugin' => TRUE,
        'uses fields' => TRUE,
        'uses options' => TRUE,
        'type' => 'normal',
        'even empty' => TRUE,
      ),
    ),
  );
}

/**
 * Preprocessor for theme_litecal_view().
 */
function template_preprocess_litecal_view(&$vars) {
  $vars['class'] = implode($vars['classes_array'], ' ');
  $vars['view']->style_plugin->preprocess($vars);
}



/*******************************************/
/** SEARCH API DATE EXTENSION BEGINS HERE. */
/*******************************************/

/**
 * Implementation of hook_date_views_tables().
 */
function litecal_date_views_tables() {
  $keys = array();
  if (module_exists('search_api')) {
    $keys = _get_search_api_index_base_tables();
  }
  return $keys;
}

/**
 * Implement hook_date_views_fields().
 * 
 * All modules that create custom fields that use the 
 * 'views_handler_field_date' handler can provide
 * additional information here about the type of
 * date they create so the date can be used by
 * the Date API views date argument and date filter.
 */
function litecal_date_views_fields($field) {
  $keys = _get_search_api_index_base_tables();

  foreach ($keys as $base_table) {
    if ($field === $base_table . '.date_filter') {
      return array(
        // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
        'sql_type' => DATE_UNIX, 
        // Timezone handling options: 'none', 'site', 'date', 'utc' .
        'tz_handling' => 'site',
        // Needed only for dates that use 'date' tz_handling.
        'timezone_field' => '', 
        // Needed only for dates that use 'date' tz_handling.
        'offset_field' => '', 
        // Array of "table.field" values for related fields that should be 
        // loaded automatically in the Views SQL.
        'related_fields' => array(),
        // Granularity of this date field's db data. 
        'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
      );
    }
  }
  return array();
}

/**
 *
 */
function _get_search_api_index_base_tables() {
  $keys = array();
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    $keys['search_api_index_' . $index->machine_name] = 'search_api_index_' . $index->machine_name;
  }
  return $keys;
}

function _litecal_date_views_fields($base) {
  $cid = 'date_views_fields_' . $base;
  cache_clear_all($cid, 'cache_views');

  // We use fields that provide filter handlers as our universe of possible
  // fields of interest.
  $all_fields = date_views_views_fetch_fields($base, 'filter');
  
  // Iterate over all the fields that Views knows about.
  $fields = array();
  foreach ((array) $all_fields as $alias => $val) {
    // Set up some default values.
    $granularity = array('year', 'month', 'day', 'hour', 'minute');
    $tz_handling = 'site';
    $related_fields = array();
    $timezone_field = '';
    $offset_field = '';
    $rrule_field = '';
    $delta_field = '';
    $sql_type = DATE_UNIX;
    $type = '';

    $name = $alias;
    $tmp = explode('.', $name);
    $field_name = $tmp[1];
    $table_name = $tmp[0];

    $fromto = array(str_replace('.', '_', $name), str_replace('.', '_', $name));

    // If we don't have a filter handler, we don't need to do anything more.
    if (!$handler = views_get_handler($table_name, $field_name, 'filter')) {
      continue; 
    }
    $handler = views_get_handler($table_name, $field_name, 'filter');
    $handler_name = $handler->definition['handler'];
    if ($handler_name == 'views_handler_filter_broken') {
      continue;
    }

    // For Field module fields, get the date type.
    $custom = array();
    if (isset($handler->definition['real field'])) { //$handler->definition['group'] == "Date") {
      $real_field = $handler->definition['real field'];
      $pieces = explode(':', $real_field);
      $field = field_info_field($pieces[0]);

      switch ($field['type']) {
       case 'date':
          $type = 'cck_string';
          $sql_type = DATE_ISO;
          break;
        case 'datestamp':
          $type = 'cck_timestamp';
          break;
        case 'datetime':
          $type = 'cck_datetime';
          $sql_type = DATE_DATETIME;
          break;          
      }      
      if (empty($type)) {
        // If this is not a date field, nothing more to do.
        continue;
      }
      
      $db_info = date_api_database_info($field);      
      $name = $table_name . "." . $field_name;
      $granularity = !empty($field['granularity']) ? $field['granularity'] : array('year', 'month', 'day', 'hour', 'minute');

      // Get the delta value into the query.
      if ($field['cardinality'] != 1) {
        array_push($related_fields, "$table_name.delta");
        $delta_field = $table_name . '_delta';
      }      
    }

    if (!empty($type)) {
      $alias = str_replace('.', '_', $alias);
      $fields['name'][$name] = array(
        'type' => $type,
        'sql_type' => $sql_type,
        'label' => $val['group'] . ': ' . $val['title'],
        'granularity' => $granularity,
        'fullname' => $name,
        'table_name' => $table_name,
        'field_name' => $field_name,
        'real_field' => $real_field,
        'query_name' => $alias,
        'fromto' => $fromto,
        'tz_handling' => $tz_handling,
        'offset_field' => $offset_field,
        'timezone_field' => $timezone_field,
        'rrule_field' => $rrule_field,
        'related_fields' => $related_fields,
        'delta_field' => $delta_field,
      );
    }
  }
  return $fields;
}
